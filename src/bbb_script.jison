/* Grammer of bitty brick basic script using jison *//* Copyright 2014 Yutaka Kachi MIT License */%lex%{    var parser = yy.parser;%}%%\n                    return 'EOL'\s+                   /* skip whitespace */"$"[a-zA-Z]+[a-zA-Z0-9_]*\b  return 'VARIABLE'[0-9]+("."[0-9]+)?\b  return 'NUMBER'\".*\"                return 'STRING'"="                   return '='"-"                   return '-'"+"                   return '+'"/"                   return '/'"*"                   return '*'"^"                   return '^'"("                   return '('")"                   return ')'"PI"                  return 'PI'"E"                   return 'E'"PRINT"               return 'PRINT'<<EOF>>               return 'EOF'/lex%start program%right '='%left '+' '-'%left '*' '/'%right '^'%left UMINUS%%program    : stmts EOF        {            var results = yy.parser.getResults();            yy.parser.clearResults();            typeof console !== 'undefined' ? console.log(results) : print(results);            return results;        }    ;stmts    : expr EOL stmts        { yy.parser.addResult($1); }    | expr        { yy.parser.addResult($1); }    | PRINT expr        { yy.parser.addResult($2); }    ;expr    : primary        {$$ = $1;}    | VARIABLE '=' expr        {            yy.parser.setVar($1, $3);            $$ = $3;        }    | expr '+' expr        {$$ = $1 + $3;}    | expr '-' expr        {$$ = $1 - $3;}    | expr '*' expr        {$$ = $1 * $3;}    | expr '/' expr        {$$ = $1 / $3;}    | expr '^' expr        {$$ = Math.pow($1, $3);}    ;primary    : NUMBER        {$$ = Number(yytext);}    | STRING        {$$ = String(yytext);}    | VARIABLE        {$$ =  yy.parser.getVar($1);}    | '(' expr ')'        {$$ =  $2;}    | '-' expr %prec UMINUS        {$$ = -$2;}    | E        {$$ = Math.E;}    | PI        {$$ = Math.PI;}    ;%%parser.addResult = function(value) {    if (!this._results) {        this._results = [];    }    this._results.unshift(value);}parser.getResults = function() {    return this._results;}parser.clearResults = function() {    this._results = [];}parser.getVar = function(key) {    if (!this._varTable) {        return undefined;    } else {        return this._varTable[key];    }}parser.setVar = function(key, val) {    if (!this._varTable) {        this._varTable = {};    }    this._varTable[key] = val;}